from unittest import TestCase
from idlk import base41

class Base41Test(TestCase):
    DATA = (
        # First 48.
        (0x00, "000000"),
        (0x01, "000001"),
        (0x02, "000002"),
        (0x03, "000003"),
        (0x04, "000004"),
        (0x05, "000005"),
        (0x06, "000006"),
        (0x07, "000007"),
        (0x08, "000008"),
        (0x09, "000009"),
        (0x0A, "00000a"),
        (0x0B, "00000b"),
        (0x0C, "00000c"),
        (0x0D, "00000d"),
        (0x0E, "00000e"),
        (0x0F, "00000f"),
        (0x10, "00000g"),
        (0x11, "00000h"),
        (0x12, "00000i"),
        (0x13, "00000j"),
        (0x14, "00000k"),
        (0x15, "00000l"),
        (0x16, "00000m"),
        (0x17, "00000n"),
        (0x18, "00000o"),
        (0x19, "00000p"),
        (0x1A, "00000q"),
        (0x1B, "00000r"),
        (0x1C, "00000s"),
        (0x1D, "00000t"),
        (0x1E, "00000u"),
        (0x1F, "00000v"),
        (0x20, "00000w"),
        (0x21, "00000x"),
        (0x22, "00000y"),
        (0x23, "00000z"),
        (0x24, "00000-"),
        (0x25, "00000_"),
        (0x26, "00000("),
        (0x27, "00000)"),
        (0x28, "00000$"),
        (0x29, "000010"),
        (0x2A, "000011"),
        (0x2B, "000012"),
        (0x2C, "000013"),
        (0x2D, "000014"),
        (0x2E, "000015"),
        (0x2F, "000016"),

        # Last 48.
        (0xFFFFFFD0, "_2(abu"),
        (0xFFFFFFD1, "_2(abv"),
        (0xFFFFFFD2, "_2(abw"),
        (0xFFFFFFD3, "_2(abx"),
        (0xFFFFFFD4, "_2(aby"),
        (0xFFFFFFD5, "_2(abz"),
        (0xFFFFFFD6, "_2(ab-"),
        (0xFFFFFFD7, "_2(ab_"),
        (0xFFFFFFD8, "_2(ab("),
        (0xFFFFFFD9, "_2(ab)"),
        (0xFFFFFFDA, "_2(ab$"),
        (0xFFFFFFDB, "_2(ac0"),
        (0xFFFFFFDC, "_2(ac1"),
        (0xFFFFFFDD, "_2(ac2"),
        (0xFFFFFFDE, "_2(ac3"),
        (0xFFFFFFDF, "_2(ac4"),
        (0xFFFFFFE0, "_2(ac5"),
        (0xFFFFFFE1, "_2(ac6"),
        (0xFFFFFFE2, "_2(ac7"),
        (0xFFFFFFE3, "_2(ac8"),
        (0xFFFFFFE4, "_2(ac9"),
        (0xFFFFFFE5, "_2(aca"),
        (0xFFFFFFE6, "_2(acb"),
        (0xFFFFFFE7, "_2(acc"),
        (0xFFFFFFE8, "_2(acd"),
        (0xFFFFFFE9, "_2(ace"),
        (0xFFFFFFEA, "_2(acf"),
        (0xFFFFFFEB, "_2(acg"),
        (0xFFFFFFEC, "_2(ach"),
        (0xFFFFFFED, "_2(aci"),
        (0xFFFFFFEE, "_2(acj"),
        (0xFFFFFFEF, "_2(ack"),
        (0xFFFFFFF0, "_2(acl"),
        (0xFFFFFFF1, "_2(acm"),
        (0xFFFFFFF2, "_2(acn"),
        (0xFFFFFFF3, "_2(aco"),
        (0xFFFFFFF4, "_2(acp"),
        (0xFFFFFFF5, "_2(acq"),
        (0xFFFFFFF6, "_2(acr"),
        (0xFFFFFFF7, "_2(acs"),
        (0xFFFFFFF8, "_2(act"),
        (0xFFFFFFF9, "_2(acu"),
        (0xFFFFFFFA, "_2(acv"),
        (0xFFFFFFFB, "_2(acw"),
        (0xFFFFFFFC, "_2(acx"),
        (0xFFFFFFFD, "_2(acy"),
        (0xFFFFFFFE, "_2(acz"),
        (0xFFFFFFFF, "_2(ac-"),
    )

    def test_encode(self):
        for x, enc in self.DATA:
            self.assertEqual(base41.encode(x), enc)

    def test_decode(self):
        for x, enc in self.DATA:
            self.assertEqual(base41.decode(enc), x)
